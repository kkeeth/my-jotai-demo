{"version":3,"sources":["Atoms.js","App.js","reportWebVitals.js","index.js"],"names":["countAtom","atom","countryAtom","isPrimaryAtom","Counter","useAtom","count","setCount","onClick","value","Country","text","setText","toUpperCase","onChange","e","target","ColorButton","isPrimary","setIsPrimary","title","className","App","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAEaA,EAAYC,YAAK,GACjBC,EAAcD,YAAK,SACnBE,EAAgBF,aAAK,G,OCI5BG,EAAU,WAAO,IAAD,EACMC,YAAQL,GADd,mBACbM,EADa,KACNC,EADM,KAIpB,OACE,qCACE,+BAAKD,EAAL,OACA,wBAAQE,QALQ,kBAAMD,GAAS,SAACE,GAAD,OAAWA,EAAQ,MAKlD,wBAKAC,EAAU,WAAO,IAAD,EACIL,YAAQH,GADZ,mBACbS,EADa,KACPC,EADO,KAIpB,OACE,qCACE,0CAAaD,KACb,6CAAgBA,EAAKE,iBACrB,uBAAOJ,MAAOE,EAAMG,SANJ,SAACC,GAAD,OAAOH,EAAQG,EAAEC,OAAOP,cAWxCQ,EAAc,WAAO,IAAD,EACUZ,YAAQF,GADlB,mBACjBe,EADiB,KACNC,EADM,KAElBC,EAAQF,EAAY,UAAY,YAItC,OAAO,wBAAQG,UAAYH,EAAY,iBAAmB,mBAAoBV,QAF1D,kBAAMW,GAAcD,IAEjC,SAA8FE,KAmBxFE,EAhBH,WACV,OACE,cAAC,IAAD,UACE,qBAAKD,UAAU,MAAf,SACE,eAAC,WAAD,CAAUE,SAAU,4CAApB,UACE,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,YCvCKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.56cd2e7b.chunk.js","sourcesContent":["import { atom } from 'jotai';\n\nexport const countAtom = atom(0);\nexport const countryAtom = atom('Japan');\nexport const isPrimaryAtom = atom(true);\n","import React, { Suspense } from 'react';\nimport './App.css';\nimport { Provider, useAtom } from 'jotai';\n// atoms\nimport { countAtom, countryAtom, isPrimaryAtom } from './Atoms';\n\n\n// components\nconst Counter = () => {\n  const [count, setCount] = useAtom(countAtom)\n  const handleClick = () => setCount((value) => value + 1)\n\n  return (\n    <>\n      <h1>{count} </h1>\n      <button onClick={handleClick}>one up</button>\n    </>\n  );\n};\n\nconst Country = () => {\n  const [text, setText] = useAtom(countryAtom);\n  const handleInput = (e) => setText(e.target.value);\n\n  return (\n    <>\n      <h2>Normal: {text}</h2>\n      <h2>Uppercase: {text.toUpperCase()}</h2>\n      <input value={text} onChange={handleInput} />\n    </>\n  );\n};\n\nconst ColorButton = () => {\n  const [isPrimary, setIsPrimary] = useAtom(isPrimaryAtom);\n  const title = isPrimary ? \"Primary\" : \"Secondary\";\n\n  const handleClick = () => setIsPrimary(!isPrimary);\n\n  return <button className={ isPrimary ? \"primary-button\" : \"secondary-button\"} onClick={handleClick}>{title}</button>\n}\n\nconst App = () => {\n  return (\n    <Provider>\n      <div className=\"App\">\n        <Suspense fallback={<h2>Loading...</h2>}>\n          <Counter />\n          <hr />\n          <Country />\n          <hr />\n          <ColorButton />\n        </Suspense>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}